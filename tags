!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOC_ZERO	kernel/include/pmap.h	/^	ALLOC_ZERO = 1<<0,$/;"	e	enum:__anon2
ASFLAGS	Makefile	/^ASFLAGS = -m32 -MD$/;"	m
BLUE_SCREEN_TEXT	app/lib/abort.c	14;"	d	file:
BLUE_SCREEN_TEXT	kernel/lib/abort.c	14;"	d	file:
CC	Makefile	/^CC = gcc$/;"	m
CFILES	Makefile	/^CFILES = $(shell find kernel\/ app\/ -name "*.c")$/;"	m
CFLAGS	Makefile	/^CFLAGS = -m32 -c -static  -MD -std=gnu89 -ggdb \\$/;"	m
CHARACTER_PER_SECOND	app/game.c	8;"	d	file:
CHECKSUM	kernel/entry.S	/^#define CHECKSUM (-(MULTIBOOT_HEADER_MAGIC + MULTIBOOT_HEADER_FLAGS))$/;"	d
CR0_AM	kernel/include/mmu.h	86;"	d
CR0_CD	kernel/include/mmu.h	88;"	d
CR0_EM	kernel/include/mmu.h	81;"	d
CR0_ET	kernel/include/mmu.h	83;"	d
CR0_MP	kernel/include/mmu.h	80;"	d
CR0_NE	kernel/include/mmu.h	84;"	d
CR0_NW	kernel/include/mmu.h	87;"	d
CR0_PE	kernel/include/mmu.h	79;"	d
CR0_PG	kernel/include/mmu.h	89;"	d
CR0_TS	kernel/include/mmu.h	82;"	d
CR0_WP	kernel/include/mmu.h	85;"	d
CR4_DE	kernel/include/mmu.h	94;"	d
CR4_MCE	kernel/include/mmu.h	92;"	d
CR4_PCE	kernel/include/mmu.h	91;"	d
CR4_PSE	kernel/include/mmu.h	93;"	d
CR4_PVI	kernel/include/mmu.h	96;"	d
CR4_TSD	kernel/include/mmu.h	95;"	d
CR4_VME	kernel/include/mmu.h	97;"	d
DPL_KERN	kernel/include/x86/memory.h	5;"	d
DPL_KERNEL	app/include/x86/memory.h	4;"	d
DPL_KERNEL	kernel/include/x86/memory.h	4;"	d
DPL_USER	app/include/x86/memory.h	5;"	d
DPL_USER	kernel/include/x86/memory.h	6;"	d
ELFHeader	boot/boot.h	/^struct ELFHeader {$/;"	s
ELFHeader	kernel/include/boot.h	/^struct ELFHeader {$/;"	s
ELFHeader	kernel/include/x86/io.h	/^struct ELFHeader {$/;"	s
EXTPHYSMEM	kernel/include/memlayout.h	93;"	d
FALSE	app/include/const.h	5;"	d
FALSE	kernel/include/const.h	5;"	d
FALSE	kernel/include/types.h	/^enum{FALSE,TRUE};$/;"	e	enum:__anon8
FEC_PR	kernel/include/mmu.h	123;"	d
FEC_U	kernel/include/mmu.h	125;"	d
FEC_WR	kernel/include/mmu.h	124;"	d
FLOOR	app/lib/effect.c	/^static int FLOOR;$/;"	v	file:
FLOOR_NUMBER	app/include/game.h	/^}FLOOR_NUMBER;$/;"	t	typeref:struct:__anon10
FL_AC	kernel/include/mmu.h	117;"	d
FL_AF	kernel/include/mmu.h	102;"	d
FL_CF	kernel/include/mmu.h	100;"	d
FL_DF	kernel/include/mmu.h	107;"	d
FL_ID	kernel/include/mmu.h	120;"	d
FL_IF	kernel/include/mmu.h	106;"	d
FL_IF	kernel/process/load.c	15;"	d	file:
FL_IOPL_0	kernel/include/mmu.h	110;"	d
FL_IOPL_1	kernel/include/mmu.h	111;"	d
FL_IOPL_2	kernel/include/mmu.h	112;"	d
FL_IOPL_3	kernel/include/mmu.h	113;"	d
FL_IOPL_MASK	kernel/include/mmu.h	109;"	d
FL_NT	kernel/include/mmu.h	114;"	d
FL_OF	kernel/include/mmu.h	108;"	d
FL_PF	kernel/include/mmu.h	101;"	d
FL_RF	kernel/include/mmu.h	115;"	d
FL_SF	kernel/include/mmu.h	104;"	d
FL_TF	kernel/include/mmu.h	105;"	d
FL_VIF	kernel/include/mmu.h	118;"	d
FL_VIP	kernel/include/mmu.h	119;"	d
FL_VM	kernel/include/mmu.h	116;"	d
FL_ZF	kernel/include/mmu.h	103;"	d
FPS	app/game.c	7;"	d	file:
FREQ_8253	kernel/src/device/timer.c	7;"	d	file:
GAME_CFILES	Makefile	/^GAME_CFILES = $(shell find app\/ -name "*.c")$/;"	m
GAME_OBJS	Makefile	/^GAME_OBJS = $(GAME_CFILES:.c=.o) $(GAME_SFILES:.S=.o)$/;"	m
GAME_SFILES	Makefile	/^GAME_SFILES = $(shell find app\/ -name "*.S")$/;"	m
GDB	Makefile	/^GDB = gdb$/;"	m
GDB_OPTIONS	Makefile	/^GDB_OPTIONS = -ex "target remote 127.0.0.1:1234"$/;"	m
GDT_ENTRY	boot/asm.h	2;"	d
GDT_ENTRY	kernel/process/load.c	17;"	d	file:
GD_KD	kernel/include/memlayout.h	16;"	d
GD_KT	kernel/include/memlayout.h	15;"	d
GD_TSS0	kernel/include/memlayout.h	19;"	d
GD_UD	kernel/include/memlayout.h	18;"	d
GD_UT	kernel/include/memlayout.h	17;"	d
GateDescriptor	app/include/x86/memory.h	/^struct GateDescriptor {$/;"	s
GateDescriptor	kernel/include/x86/memory.h	/^struct GateDescriptor {$/;"	s
Gatedesc	kernel/include/mmu.h	/^struct Gatedesc {$/;"	s
Get_seg_off	kernel/irq/irq_handle.c	/^uint32_t Get_seg_off() {$/;"	f
HZ	app/include/device/timer.h	4;"	d
HZ	kernel/include/device/timer.h	4;"	d
INTERLACE	app/device/video.c	15;"	d	file:
INTERLACE	kernel/lib/video.c	15;"	d	file:
INTERRUPT_GATE_32	kernel/irq/idt.c	3;"	d	file:
IOPHYSMEM	kernel/include/memlayout.h	92;"	d
IRQ_SLAVE	kernel/irq/i8259.c	5;"	d	file:
JOS_INC_MEMLAYOUT_H	kernel/include/memlayout.h	2;"	d
JOS_INC_MMU_H	kernel/include/mmu.h	2;"	d
JOS_INC_STDARG_H	kernel/include/stdarg.h	3;"	d
JOS_INC_STDIO_H	kernel/include/stdio.h	2;"	d
JOS_INC_TYPES_H	kernel/include/types.h	2;"	d
JOS_INC_X86_H	kernel/include/x86/x86.h	2;"	d
JOS_KERN_PMAP_H	kernel/include/pmap.h	4;"	d
KADDR	kernel/include/pmap.h	34;"	d
KERNBASE	kernel/include/memlayout.h	87;"	d
KERNEL	Makefile	/^KERNEL=k.dat$/;"	m
KERNEL_CFILES	Makefile	/^KERNEL_CFILES = $(shell find kernel\/ -name "*.c")$/;"	m
KERNEL_SFILES	Makefile	/^KERNEL_SFILES = $(shell find kernel\/ -name "*.S")$/;"	m
KERN_INC_PRECESS_H	kernel/include/process.h	2;"	d
KMEM	kernel/include/memory.h	17;"	d
KOFFSET	kernel/include/memory.h	10;"	d
KOFFSET	kernel/include/memory.h	7;"	d
KSEL	kernel/include/x86/memory.h	29;"	d
KSTACKTOP	kernel/include/memlayout.h	96;"	d
KSTACK_SIZE	kernel/include/process.h	8;"	d
KSTKGAP	kernel/include/memlayout.h	98;"	d
KSTKSIZE	kernel/include/memlayout.h	97;"	d
K_OBJS	Makefile	/^K_OBJS = $(KERNEL_CFILES:.c=.o) $(KERNEL_SFILES:.S=.o)$/;"	m
LD	Makefile	/^LD = ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -melf_i386$/;"	m
LINKLIST_DEF	app/include/adt/linklist.h	27;"	d
LINKLIST_DEF	kernel/include/adt/linklist.h	27;"	d
LINKLIST_DEF_FI	app/include/adt/linklist.h	31;"	d
LINKLIST_DEF_FI	kernel/include/adt/linklist.h	31;"	d
LINKLIST_IMPL	app/include/adt/linklist.h	43;"	d
LINKLIST_IMPL	kernel/include/adt/linklist.h	43;"	d
ListHead	kernel/include/list.h	/^struct ListHead {$/;"	s
ListHead	kernel/include/list.h	/^typedef struct ListHead ListHead;$/;"	t	typeref:struct:ListHead
MAX	kernel/include/types.h	49;"	d
MAX_MEM	kernel/include/memory.h	8;"	d
MAX_MEM	kernel/memory/memory.c	11;"	d	file:
MIN	kernel/include/types.h	43;"	d
MMIOBASE	kernel/include/memlayout.h	102;"	d
MMIOLIM	kernel/include/memlayout.h	101;"	d
MULTIBOOT_HEADER_FLAGS	kernel/entry.S	/^#define MULTIBOOT_HEADER_FLAGS (0)$/;"	d
MULTIBOOT_HEADER_MAGIC	kernel/entry.S	/^#define MULTIBOOT_HEADER_MAGIC (0x1BADB002)$/;"	d
NPDENTRIES	kernel/include/mmu.h	45;"	d
NPTENTRIES	kernel/include/mmu.h	46;"	d
NR_IRQ	app/include/x86/cpu.h	34;"	d
NR_IRQ	kernel/include/x86/cpu.h	34;"	d
NR_PALETTE_ENTRY	kernel/src/device/palette.c	10;"	d	file:
NR_PCB	kernel/include/process.h	9;"	d
NR_SEGMENTS	app/include/x86/memory.h	7;"	d
NR_SEGMENTS	kernel/include/x86/memory.h	21;"	d
NULL	app/include/const.h	7;"	d
NULL	kernel/include/stdio.h	7;"	d
NULL	kernel/include/types.h	5;"	d
OBJS	Makefile	/^OBJS = $(CFILES:.c=.o) $(SFILES:.S=.o)$/;"	m
PADDR	kernel/include/pmap.h	22;"	d
PARTIAL_UPDATE	app/device/video.c	14;"	d	file:
PARTIAL_UPDATE	app/device/video.c	18;"	d	file:
PARTIAL_UPDATE	kernel/lib/video.c	14;"	d	file:
PARTIAL_UPDATE	kernel/lib/video.c	18;"	d	file:
PCB	kernel/include/process.h	/^typedef struct PCB{$/;"	s
PCB	kernel/include/process.h	/^} PCB;$/;"	t	typeref:struct:PCB
PDX	kernel/include/mmu.h	33;"	d
PDXSHIFT	kernel/include/mmu.h	55;"	d
PFTEMP	kernel/include/memlayout.h	137;"	d
PGADDR	kernel/include/mmu.h	42;"	d
PGNUM	kernel/include/mmu.h	30;"	d
PGOFF	kernel/include/mmu.h	39;"	d
PGSHIFT	kernel/include/mmu.h	49;"	d
PGSIZE	kernel/include/mmu.h	48;"	d
PHY_MEM	kernel/include/memory.h	20;"	d
PORT_PIC_MASTER	kernel/irq/i8259.c	3;"	d	file:
PORT_PIC_SLAVE	kernel/irq/i8259.c	4;"	d	file:
PTE_A	kernel/include/mmu.h	63;"	d
PTE_ADDR	kernel/include/mmu.h	76;"	d
PTE_AVAIL	kernel/include/mmu.h	70;"	d
PTE_D	kernel/include/mmu.h	64;"	d
PTE_G	kernel/include/mmu.h	66;"	d
PTE_P	kernel/include/mmu.h	58;"	d
PTE_PCD	kernel/include/mmu.h	62;"	d
PTE_PS	kernel/include/mmu.h	65;"	d
PTE_PWT	kernel/include/mmu.h	61;"	d
PTE_SYSCALL	kernel/include/mmu.h	73;"	d
PTE_U	kernel/include/mmu.h	60;"	d
PTE_W	kernel/include/mmu.h	59;"	d
PTSHIFT	kernel/include/mmu.h	52;"	d
PTSIZE	kernel/include/mmu.h	51;"	d
PTX	kernel/include/mmu.h	36;"	d
PTXSHIFT	kernel/include/mmu.h	54;"	d
PageInfo	kernel/include/memlayout.h	/^struct PageInfo {$/;"	s
ProgramHeader	boot/boot.h	/^struct ProgramHeader {$/;"	s
ProgramHeader	kernel/include/boot.h	/^struct ProgramHeader {$/;"	s
ProgramHeader	kernel/include/x86/io.h	/^struct ProgramHeader {$/;"	s
Pseudodesc	kernel/include/mmu.h	/^struct Pseudodesc {$/;"	s
QEMU	Makefile	/^QEMU = qemu-system-i386$/;"	m
RELOC	kernel/entry.S	/^#define	RELOC(x) ((x) - KERNBASE)$/;"	d
ROUNDDOWN	kernel/include/types.h	58;"	d
ROUNDUP	kernel/include/types.h	64;"	d
SCR_HEIGHT	app/include/device/video.h	9;"	d
SCR_HEIGHT	kernel/include/device/video.h	9;"	d
SCR_SIZE	app/include/device/video.h	10;"	d
SCR_SIZE	kernel/include/device/video.h	10;"	d
SCR_WIDTH	app/include/device/video.h	8;"	d
SCR_WIDTH	kernel/include/device/video.h	8;"	d
SECTSIZE	boot/main.c	11;"	d	file:
SECTSIZE	kernel/kvm.c	4;"	d	file:
SECTSIZE	kernel/process/load.c	16;"	d	file:
SEG	kernel/include/mmu.h	142;"	d
SEG	kernel/include/x86/memory.h	68;"	d
SEG16	kernel/include/x86/memory.h	73;"	d
SEG_ASM	boot/asm.h	9;"	d
SEG_FAULT	kernel/include/mmu.h	170;"	d
SEG_KCODE	kernel/include/x86/memory.h	22;"	d
SEG_KDATA	kernel/include/x86/memory.h	23;"	d
SEG_KERNEL_CODE	app/include/x86/memory.h	8;"	d
SEG_KERNEL_CODE	kernel/include/x86/memory.h	7;"	d
SEG_KERNEL_DATA	app/include/x86/memory.h	9;"	d
SEG_KERNEL_DATA	kernel/include/x86/memory.h	8;"	d
SEG_NULL	kernel/include/mmu.h	139;"	d
SEG_NULL	kernel/include/mmu.h	168;"	d
SEG_NULLASM	boot/asm.h	5;"	d
SEG_SIZE	kernel/memory/memory.c	10;"	d	file:
SEG_TSS	kernel/include/x86/memory.h	26;"	d
SEG_UCODE	kernel/include/x86/memory.h	24;"	d
SEG_UDATA	kernel/include/x86/memory.h	25;"	d
SELECTOR_KERNEL	kernel/irq/irq_handle.c	3;"	d	file:
SELECTOR_USER	kernel/kvm.c	5;"	d	file:
SERIAL_PORT	kernel/src/serial.c	3;"	d	file:
SETCALLGATE	kernel/include/mmu.h	296;"	d
SETGATE	kernel/include/mmu.h	282;"	d
SFILES	Makefile	/^SFILES = $(shell find kernel\/ app\/ -name "*.S")$/;"	m
SLOW	app/device/video.c	11;"	d	file:
SLOW	kernel/lib/video.c	11;"	d	file:
SRL	kernel/entry.S	/^#define SRL(val, shamt)		(((val) >> (shamt)) & ~(-1 << (32 - (shamt))))$/;"	d
STA_A	kernel/include/mmu.h	189;"	d
STA_C	kernel/include/mmu.h	186;"	d
STA_E	kernel/include/mmu.h	185;"	d
STA_R	kernel/include/mmu.h	188;"	d
STA_R	kernel/include/x86/memory.h	13;"	d
STA_W	kernel/include/mmu.h	187;"	d
STA_W	kernel/include/x86/memory.h	12;"	d
STA_X	kernel/include/mmu.h	184;"	d
STA_X	kernel/include/x86/memory.h	11;"	d
STS_CG16	kernel/include/mmu.h	195;"	d
STS_CG32	kernel/include/mmu.h	201;"	d
STS_IG16	kernel/include/mmu.h	197;"	d
STS_IG32	kernel/include/mmu.h	202;"	d
STS_IG32	kernel/include/x86/memory.h	17;"	d
STS_LDT	kernel/include/mmu.h	193;"	d
STS_T16A	kernel/include/mmu.h	192;"	d
STS_T16B	kernel/include/mmu.h	194;"	d
STS_T32A	kernel/include/mmu.h	199;"	d
STS_T32A	kernel/include/x86/memory.h	16;"	d
STS_T32B	kernel/include/mmu.h	200;"	d
STS_TG	kernel/include/mmu.h	196;"	d
STS_TG16	kernel/include/mmu.h	198;"	d
STS_TG32	kernel/include/mmu.h	203;"	d
STS_TG32	kernel/include/x86/memory.h	18;"	d
SYS_draw	app/lib/syscall.c	/^enum {hhh=0,SYS_write1,SYS_time1,SYS_keyboard1, SYS_draw};$/;"	e	enum:__anon9	file:
SYS_draw	kernel/syscall/do_syscall.c	/^enum {hhhh,SYS_write1,SYS_time1,SYS_keyboard1, SYS_draw};$/;"	e	enum:__anon1	file:
SYS_keyboard1	app/lib/syscall.c	/^enum {hhh=0,SYS_write1,SYS_time1,SYS_keyboard1, SYS_draw};$/;"	e	enum:__anon9	file:
SYS_keyboard1	kernel/syscall/do_syscall.c	/^enum {hhhh,SYS_write1,SYS_time1,SYS_keyboard1, SYS_draw};$/;"	e	enum:__anon1	file:
SYS_time1	app/lib/syscall.c	/^enum {hhh=0,SYS_write1,SYS_time1,SYS_keyboard1, SYS_draw};$/;"	e	enum:__anon9	file:
SYS_time1	kernel/syscall/do_syscall.c	/^enum {hhhh,SYS_write1,SYS_time1,SYS_keyboard1, SYS_draw};$/;"	e	enum:__anon1	file:
SYS_write1	app/lib/syscall.c	/^enum {hhh=0,SYS_write1,SYS_time1,SYS_keyboard1, SYS_draw};$/;"	e	enum:__anon9	file:
SYS_write1	kernel/syscall/do_syscall.c	/^enum {hhhh,SYS_write1,SYS_time1,SYS_keyboard1, SYS_draw};$/;"	e	enum:__anon1	file:
SegDesc	kernel/include/x86/memory.h	/^struct SegDesc {$/;"	s
SegDesc	kernel/include/x86/memory.h	/^typedef struct SegDesc SegDesc;$/;"	t	typeref:struct:SegDesc
Segdesc	kernel/include/mmu.h	/^struct Segdesc {$/;"	s
Sleep	kernel/process.c	/^void Sleep (PCB *l,uint32_t Time)$/;"	f
TIMER_PORT	kernel/src/device/timer.c	6;"	d	file:
TRAP_GATE_32	kernel/irq/idt.c	4;"	d	file:
TRUE	app/include/const.h	4;"	d
TRUE	kernel/include/const.h	4;"	d
TRUE	kernel/include/types.h	/^enum{FALSE,TRUE};$/;"	e	enum:__anon8
TSS	kernel/include/x86/memory.h	/^struct TSS {$/;"	s
TSS	kernel/include/x86/memory.h	/^typedef struct TSS TSS;$/;"	t	typeref:struct:TSS
Taskstate	kernel/include/mmu.h	/^struct Taskstate {$/;"	s
TrapFrame	app/include/x86/memory.h	/^struct TrapFrame {$/;"	s
TrapFrame	kernel/include/x86/memory.h	/^  typedef struct TrapFrame {$/;"	s
TrapFrame	kernel/include/x86/memory.h	/^  } TrapFrame;$/;"	t	typeref:struct:TrapFrame
UENVS	kernel/include/memlayout.h	116;"	d
ULIM	kernel/include/memlayout.h	104;"	d
UPAGES	kernel/include/memlayout.h	114;"	d
UPDATE_PER_SECOND	app/game.c	9;"	d	file:
UPDATE_kbd	app/lib/syscall.c	/^void UPDATE_kbd(int * key)$/;"	f
USEL	kernel/include/x86/memory.h	30;"	d
USTABDATA	kernel/include/memlayout.h	139;"	d
USTACKTOP	kernel/include/memlayout.h	128;"	d
UTEMP	kernel/include/memlayout.h	134;"	d
UTEXT	kernel/include/memlayout.h	131;"	d
UTOP	kernel/include/memlayout.h	123;"	d
UVPT	kernel/include/memlayout.h	112;"	d
UXSTACKTOP	kernel/include/memlayout.h	125;"	d
VGA_DAC_DATA	kernel/src/device/palette.c	7;"	d	file:
VGA_DAC_READ_INDEX	kernel/src/device/palette.c	5;"	d	file:
VGA_DAC_WRITE_INDEX	kernel/src/device/palette.c	6;"	d	file:
VMEM_ADDR	app/include/device/video.h	11;"	d
VMEM_ADDR	kernel/include/device/video.h	11;"	d
__ASSERT_H__	app/include/assert.h	2;"	d
__ASSERT_H__	app/lib/assert.h	2;"	d
__ASSERT_H__	kernel/include/assert.h	2;"	d
__COMMON_H__	app/include/common.h	2;"	d
__COMMON_H__	kernel/include/common.h	2;"	d
__CONST_H__	app/include/const.h	2;"	d
__CONST_H__	kernel/include/const.h	2;"	d
__FONT_H__	app/include/device/font.h	2;"	d
__FONT_H__	kernel/include/device/font.h	21;"	d
__GAME_H__	app/include/game.h	2;"	d
__GAME_H__	kernel/include/game.h	2;"	d
__IRQ_H__	kernel/include/irq.h	2;"	d
__LINKLIST_H__	app/include/adt/linklist.h	2;"	d
__LINKLIST_H__	kernel/include/adt/linklist.h	2;"	d
__LIST_H__	kernel/include/list.h	2;"	d
__MEMORY_H__	kernel/include/memory.h	2;"	d
__PALETTE_H__	app/include/device/palette.h	2;"	d
__PALETTE_H__	kernel/include/device/palette.h	2;"	d
__STRING_H__	app/include/string.h	2;"	d
__STRING_H__	kernel/include/string.h	2;"	d
__TIMER_H__	app/include/device/timer.h	2;"	d
__TIMER_H__	kernel/include/device/timer.h	2;"	d
__TYPES_H__	app/include/types.h	2;"	d
__VIDEO_H__	app/include/device/video.h	2;"	d
__VIDEO_H__	kernel/include/device/video.h	2;"	d
__X86_CPU_H__	app/include/x86/cpu.h	2;"	d
__X86_CPU_H__	kernel/include/x86/cpu.h	2;"	d
__X86_IO_H__	app/include/x86/io.h	2;"	d
__X86_IO_H__	kernel/include/x86/io.h	2;"	d
__X86_MEMORY_H__	app/include/x86/memory.h	2;"	d
__X86_MEMORY_H__	kernel/include/x86/memory.h	2;"	d
__list_add	kernel/include/list.h	/^ static inline void __list_add(ListHead *new,  ListHead *prev, ListHead *next)$/;"	f
__x86_H__	app/include/x86/x86.h	2;"	d
_kaddr	kernel/include/pmap.h	/^_kaddr(const char *file, int line, physaddr_t pa)$/;"	f
_paddr	kernel/include/pmap.h	/^_paddr(const char *file, int line, void *kva)$/;"	f
_start	kernel/entry.S	/^_start = RELOC(entry)$/;"	d
abort	app/lib/abort.c	/^abort(const char *fname, int line) {$/;"	f
abort	kernel/lib/abort.c	/^abort(const char *fname, int line) {$/;"	f
align	boot/boot.h	/^	unsigned int align;$/;"	m	struct:ProgramHeader
align	kernel/include/boot.h	/^	unsigned int align;$/;"	m	struct:ProgramHeader
align	kernel/include/x86/io.h	/^	unsigned int align;$/;"	m	struct:ProgramHeader
append	app/lib/abort.c	/^append(char **p, const char *str) {$/;"	f	file:
append	kernel/lib/abort.c	/^append(char **p, const char *str) {$/;"	f	file:
asm_do_irq	kernel/irq/do_irq.S	/^asm_do_irq:$/;"	l
assert	app/include/assert.h	7;"	d
assert	app/lib/assert.h	7;"	d
assert	kernel/include/assert.h	7;"	d
avl	kernel/include/x86/memory.h	/^	uint32_t avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:SegDesc
base	kernel/include/memory.h	/^	uint32_t base,limit,gdt,cs,ds;$/;"	m	struct:__anon6
base_15_0	kernel/include/x86/memory.h	/^	uint32_t base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:SegDesc
base_23_16	kernel/include/x86/memory.h	/^	uint32_t base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:SegDesc
base_31_24	kernel/include/x86/memory.h	/^	uint32_t base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:SegDesc
blood	app/include/game.h	/^int blood;$/;"	v
blue_screen	app/lib/abort.c	/^blue_screen(const char *file, int line) {$/;"	f	file:
blue_screen	kernel/lib/abort.c	/^blue_screen(const char *file, int line) {$/;"	f	file:
bool	app/include/types.h	/^typedef int bool;$/;"	t
bool	kernel/include/types.h	/^typedef _Bool bool;$/;"	t
bootmain	boot/main.c	/^bootmain(void) {$/;"	f
bootstack	kernel/entry.S	/^bootstack:$/;"	l
bootstacktop	kernel/entry.S	/^bootstacktop:$/;"	l
bottle	app/lib/draw.c	10;"	d	file:
bottle	app/lib/effect.c	13;"	d	file:
breakpoint	kernel/include/x86/x86.h	/^breakpoint(void)$/;"	f
buf	app/lib/printf.c	/^char buf[256];$/;"	v
characters	app/lib/effect.c	/^characters(void) {$/;"	f
cpuid	kernel/include/x86/x86.h	/^cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)$/;"	f
cr3	kernel/include/x86/memory.h	/^                uint32_t cr3, eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS::__anon3::__anon5
creat_new_food	app/lib/effect.c	/^void creat_new_food(void)$/;"	f
creat_new_snake	app/lib/effect.c	/^void creat_new_snake(void)$/;"	f
cs	kernel/include/memory.h	/^	uint32_t base,limit,gdt,cs,ds;$/;"	m	struct:__anon6
cs	kernel/include/x86/memory.h	/^	    uint32_t eip, cs, eflags;$/;"	m	struct:TrapFrame
cs	kernel/include/x86/memory.h	/^                uint32_t es, cs, ss, ds, fs, gs, ldt;$/;"	m	struct:TSS::__anon3::__anon5
current	kernel/process.c	/^PCB *current =&idle;$/;"	v
db	kernel/include/x86/memory.h	/^	uint32_t db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:SegDesc
decide	app/lib/effect.c	/^bool decide(int x,int y)$/;"	f
die	app/lib/effect.c	/^void die(void)$/;"	f
direction	app/include/game.h	/^	int direction;$/;"	v
disable_interrupt	app/include/x86/cpu.h	/^disable_interrupt(void) {$/;"	f
disable_interrupt	kernel/include/x86/cpu.h	/^disable_interrupt(void) {$/;"	f
display_buffer	app/device/video.c	/^display_buffer(void) {$/;"	f
display_buffer	kernel/lib/video.c	/^display_buffer(void) {$/;"	f
do_keyboard	kernel/irq/irq_handle.c	/^static void (*do_keyboard)(int);$/;"	v	file:
do_syscall	kernel/syscall/do_syscall.c	/^void do_syscall(struct TrapFrame *tf) {$/;"	f
do_timer	kernel/irq/irq_handle.c	/^static void (*do_timer)(void);$/;"	v	file:
dontcare	kernel/include/x86/memory.h	/^                char dontcare[88];$/;"	m	struct:TSS::__anon3::__anon4
door	app/lib/draw.c	5;"	d	file:
door	app/lib/effect.c	8;"	d	file:
down	app/lib/draw.c	9;"	d	file:
down	app/lib/effect.c	12;"	d	file:
down_x	app/include/game.h	/^	int down_x;$/;"	m	struct:__anon10
down_y	app/include/game.h	/^	int down_y;$/;"	m	struct:__anon10
dpl	kernel/include/x86/memory.h	/^	uint32_t dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:SegDesc
draw_aixin	app/device/video.c	/^draw_aixin(int x,int y,int color)$/;"	f
draw_bottle	app/device/video.c	/^draw_bottle(int x,int y)$/;"	f
draw_character	app/device/video.c	/^draw_character(char ch, int x, int y, int color) {$/;"	f	file:
draw_character	kernel/lib/video.c	/^draw_character(char ch, int x, int y, int color) {$/;"	f	file:
draw_door	app/device/video.c	/^draw_door(int x,int y,int color)$/;"	f
draw_down	app/device/video.c	/^void draw_down(int x,int y)$/;"	f
draw_monster	app/device/video.c	/^draw_monster(int x,int y,int color)$/;"	f
draw_people	app/device/video.c	/^draw_people(int x,int y,int color)$/;"	f
draw_pixel	app/include/device/video.h	/^draw_pixel(int x, int y, int color) {$/;"	f
draw_pixel	kernel/include/device/video.h	/^draw_pixel(int x, int y, int color) {$/;"	f
draw_string	app/device/video.c	/^draw_string(const char *str, int x, int y, int color) {$/;"	f
draw_string	kernel/lib/video.c	/^draw_string(const char *str, int x, int y, int color) {$/;"	f
draw_up	app/device/video.c	/^draw_up(int x,int y)$/;"	f
draw_yaoshi	app/device/video.c	/^draw_yaoshi(int x,int y)$/;"	f
ds	kernel/include/memory.h	/^	uint32_t base,limit,gdt,cs,ds;$/;"	m	struct:__anon6
ds	kernel/include/x86/memory.h	/^	     uint32_t gs, fs, es, ds;$/;"	m	struct:TrapFrame
ds	kernel/include/x86/memory.h	/^                uint32_t es, cs, ss, ds, fs, gs, ldt;$/;"	m	struct:TSS::__anon3::__anon5
eax	app/include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
eax	kernel/include/x86/memory.h	/^	   uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
eax	kernel/include/x86/memory.h	/^                uint32_t cr3, eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS::__anon3::__anon5
ebp	app/include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
ebp	kernel/include/x86/memory.h	/^	   uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
ebp	kernel/include/x86/memory.h	/^                uint32_t cr3, eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS::__anon3::__anon5
ebx	app/include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
ebx	kernel/include/x86/memory.h	/^	   uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
ebx	kernel/include/x86/memory.h	/^                uint32_t cr3, eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS::__anon3::__anon5
ecx	app/include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
ecx	kernel/include/x86/memory.h	/^	   uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
ecx	kernel/include/x86/memory.h	/^                uint32_t cr3, eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS::__anon3::__anon5
edi	app/include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
edi	kernel/include/x86/memory.h	/^	   uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
edi	kernel/include/x86/memory.h	/^                uint32_t cr3, eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS::__anon3::__anon5
edx	app/include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
edx	kernel/include/x86/memory.h	/^	   uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
edx	kernel/include/x86/memory.h	/^                uint32_t cr3, eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS::__anon3::__anon5
eflags	kernel/include/x86/memory.h	/^	    uint32_t eip, cs, eflags;$/;"	m	struct:TrapFrame
eflags	kernel/include/x86/memory.h	/^                uint32_t cr3, eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS::__anon3::__anon5
ehsize	boot/boot.h	/^	unsigned short ehsize;$/;"	m	struct:ELFHeader
ehsize	kernel/include/boot.h	/^	unsigned short ehsize;$/;"	m	struct:ELFHeader
ehsize	kernel/include/x86/io.h	/^	unsigned short ehsize;$/;"	m	struct:ELFHeader
eip	kernel/include/x86/memory.h	/^	    uint32_t eip, cs, eflags;$/;"	m	struct:TrapFrame
eip	kernel/include/x86/memory.h	/^                uint32_t cr3, eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS::__anon3::__anon5
elf	boot/boot.h	/^	unsigned char  elf[12];$/;"	m	struct:ELFHeader
elf	kernel/include/boot.h	/^	unsigned char  elf[12];$/;"	m	struct:ELFHeader
elf	kernel/include/x86/io.h	/^	unsigned char  elf[12];$/;"	m	struct:ELFHeader
enable_interrupt	app/include/x86/cpu.h	/^enable_interrupt(void) {$/;"	f
enable_interrupt	kernel/include/x86/cpu.h	/^enable_interrupt(void) {$/;"	f
enter_user_space	kernel/kvm.c	/^enter_user_space(void) {$/;"	f
entry	boot/boot.h	/^	unsigned int   entry;$/;"	m	struct:ELFHeader
entry	kernel/entry.S	/^entry:$/;"	l
entry	kernel/include/boot.h	/^	unsigned int   entry;$/;"	m	struct:ELFHeader
entry	kernel/include/x86/io.h	/^	unsigned int   entry;$/;"	m	struct:ELFHeader
entry_pgdir	kernel/src/entrypgdir.c	/^pde_t entry_pgdir[NPDENTRIES] = {$/;"	v
entry_pgtable	kernel/src/entrypgdir.c	/^pte_t entry_pgtable[NPTENTRIES] = {$/;"	v
entry_pgtable	kernel/src/entrypgdir.c	/^pte_t entry_pgtable[NPTENTRIES];$/;"	v
error_code	kernel/include/x86/memory.h	/^	   uint32_t error_code;$/;"	m	struct:TrapFrame
es	kernel/include/x86/memory.h	/^	     uint32_t gs, fs, es, ds;$/;"	m	struct:TrapFrame
es	kernel/include/x86/memory.h	/^                uint32_t es, cs, ss, ds, fs, gs, ldt;$/;"	m	struct:TSS::__anon3::__anon5
esi	app/include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
esi	kernel/include/x86/memory.h	/^	   uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
esi	kernel/include/x86/memory.h	/^                uint32_t cr3, eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS::__anon3::__anon5
esp	kernel/include/x86/memory.h	/^	    uint32_t esp, ss;$/;"	m	struct:TrapFrame
esp	kernel/include/x86/memory.h	/^                uint32_t cr3, eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS::__anon3::__anon5
esp0	kernel/include/x86/memory.h	/^	uint32_t esp0;         \/\/ Ring 0 Stack pointer and segment selector$/;"	m	struct:TSS
esp1	kernel/include/x86/memory.h	/^                uint32_t esp1,ss1,esp2,ss2;$/;"	m	struct:TSS::__anon3::__anon5
esp2	kernel/include/x86/memory.h	/^                uint32_t esp1,ss1,esp2,ss2;$/;"	m	struct:TSS::__anon3::__anon5
exe	kernel/process/load.c	/^void exe(TrapFrame *tf)$/;"	f
exist	app/include/game.h	/^	int exist;$/;"	v
false	kernel/include/types.h	/^enum { false, true };$/;"	e	enum:__anon7
fhead	app/lib/effect.c	/^static food_t fhead=NULL;$/;"	v	file:
filesz	boot/boot.h	/^	unsigned int filesz;$/;"	m	struct:ProgramHeader
filesz	kernel/include/boot.h	/^	unsigned int filesz;$/;"	m	struct:ProgramHeader
filesz	kernel/include/x86/io.h	/^	unsigned int filesz;$/;"	m	struct:ProgramHeader
flags	boot/boot.h	/^	unsigned int   flags;$/;"	m	struct:ELFHeader
flags	boot/boot.h	/^	unsigned int flags;$/;"	m	struct:ProgramHeader
flags	kernel/include/boot.h	/^	unsigned int   flags;$/;"	m	struct:ELFHeader
flags	kernel/include/boot.h	/^	unsigned int flags;$/;"	m	struct:ProgramHeader
flags	kernel/include/x86/io.h	/^	unsigned int   flags;$/;"	m	struct:ELFHeader
flags	kernel/include/x86/io.h	/^	unsigned int flags;$/;"	m	struct:ProgramHeader
floor_number	app/include/game.h	/^FLOOR_NUMBER floor_number[10];$/;"	v
font8x8_basic	app/device/font.c	/^char font8x8_basic[128][8] = {$/;"	v
font8x8_basic	kernel/include/device/font.h	/^char font8x8_basic[128][8] = {$/;"	v
free_seg	kernel/memory/memory.c	/^ListHead free_seg;$/;"	v
fs	kernel/include/x86/memory.h	/^	     uint32_t gs, fs, es, ds;$/;"	m	struct:TrapFrame
fs	kernel/include/x86/memory.h	/^                uint32_t es, cs, ss, ds, fs, gs, ldt;$/;"	m	struct:TSS::__anon3::__anon5
g	kernel/include/x86/memory.h	/^	uint32_t g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:SegDesc
gd_args	kernel/include/mmu.h	/^	unsigned gd_args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:Gatedesc
gd_dpl	kernel/include/mmu.h	/^	unsigned gd_dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:Gatedesc
gd_off_15_0	kernel/include/mmu.h	/^	unsigned gd_off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:Gatedesc
gd_off_31_16	kernel/include/mmu.h	/^	unsigned gd_off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:Gatedesc
gd_p	kernel/include/mmu.h	/^	unsigned gd_p : 1;           \/\/ Present$/;"	m	struct:Gatedesc
gd_rsv1	kernel/include/mmu.h	/^	unsigned gd_rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:Gatedesc
gd_s	kernel/include/mmu.h	/^	unsigned gd_s : 1;           \/\/ must be 0 (system)$/;"	m	struct:Gatedesc
gd_sel	kernel/include/mmu.h	/^	unsigned gd_sel : 16;        \/\/ segment selector$/;"	m	struct:Gatedesc
gd_type	kernel/include/mmu.h	/^	unsigned gd_type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:Gatedesc
gdt	boot/start.S	/^gdt:$/;"	l
gdt	kernel/include/memory.h	/^	uint32_t base,limit,gdt,cs,ds;$/;"	m	struct:__anon6
gdt	kernel/kvm.c	/^SegDesc gdt[NR_SEGMENTS];       \/\/ the new GDT$/;"	v
gdtdesc	boot/start.S	/^gdtdesc:                           # GDT描述符$/;"	l
get_floor	app/lib/effect.c	/^get_floor(void)$/;"	f
get_fps	app/game.c	/^get_fps() {$/;"	f
get_free_seg	kernel/memory/memory.c	/^segment *get_free_seg()$/;"	f
get_gdt_off	kernel/memory/memory.c	/^uint32_t get_gdt_off(uint32_t id)$/;"	f
get_hit	app/lib/effect.c	/^get_hit(void) {$/;"	f
get_miss	app/lib/effect.c	/^get_miss(void) {$/;"	f
get_pcb	kernel/process.c	/^void get_pcb(PCB *c)$/;"	f
get_time	kernel/src/time.c	/^int get_time(void)$/;"	f
gs	kernel/include/x86/memory.h	/^	     uint32_t gs, fs, es, ds;$/;"	m	struct:TrapFrame
gs	kernel/include/x86/memory.h	/^                uint32_t es, cs, ss, ds, fs, gs, ldt;$/;"	m	struct:TSS::__anon3::__anon5
hhh	app/lib/syscall.c	/^enum {hhh=0,SYS_write1,SYS_time1,SYS_keyboard1, SYS_draw};$/;"	e	enum:__anon9	file:
hhhh	kernel/syscall/do_syscall.c	/^enum {hhhh,SYS_write1,SYS_time1,SYS_keyboard1, SYS_draw};$/;"	e	enum:__anon1	file:
hit	app/lib/effect.c	/^static int hit = 0, miss = 0;$/;"	v	file:
hlt	kernel/include/x86/x86.h	/^hlt(void)$/;"	f
icharacters	app/lib/effect.c	/^icharacters(void){$/;"	f
idle	kernel/process.c	/^static PCB idle;$/;"	v	file:
idt	kernel/irq/idt.c	/^struct GateDescriptor idt[NR_IRQ];$/;"	v	typeref:struct:GateDescriptor
in_byte	app/include/x86/io.h	/^in_byte(uint16_t port) {$/;"	f
in_byte	boot/boot.h	/^in_byte(short port) {$/;"	f
in_byte	kernel/include/boot.h	/^in_byte(short port) {$/;"	f
in_byte	kernel/include/x86/io.h	/^in_byte(uint16_t port) {$/;"	f
in_long	boot/boot.h	/^in_long(short port) {$/;"	f
in_long	kernel/include/boot.h	/^in_long(short port) {$/;"	f
in_long	kernel/include/x86/io.h	/^in_long(short port) {$/;"	f
inb	kernel/include/x86/x86.h	/^inb(int port)$/;"	f
init_idt	kernel/irq/idt.c	/^void init_idt() {$/;"	f
init_intr	kernel/irq/i8259.c	/^init_intr(void) {$/;"	f
init_map	app/lib/effect.c	/^void init_map(void)$/;"	f
init_process	kernel/process.c	/^void init_process() {$/;"	f
init_seg	kernel/kvm.c	/^init_seg() { \/\/ setup kernel segements$/;"	f
init_segment	kernel/memory/memory.c	/^void init_segment()$/;"	f
init_serial	kernel/src/serial.c	/^init_serial(void) {$/;"	f
init_timer	kernel/src/device/timer.c	/^init_timer(void) {$/;"	f
inl	kernel/include/x86/x86.h	/^inl(int port)$/;"	f
insb	kernel/include/x86/x86.h	/^insb(int port, void *addr, int cnt)$/;"	f
insl	kernel/include/x86/x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
insw	kernel/include/x86/x86.h	/^insw(int port, void *addr, int cnt)$/;"	f
int16_t	app/include/types.h	/^typedef          short int16_t;$/;"	t
int16_t	kernel/include/types.h	/^typedef short int16_t;$/;"	t
int32_t	app/include/types.h	/^typedef          int   int32_t;$/;"	t
int32_t	kernel/include/types.h	/^typedef int int32_t;$/;"	t
int64_t	kernel/include/types.h	/^typedef long long int64_t;$/;"	t
int8_t	app/include/types.h	/^typedef          char  int8_t;$/;"	t
int8_t	kernel/include/types.h	/^typedef __signed char int8_t;$/;"	t
intptr_t	kernel/include/types.h	/^typedef int32_t intptr_t;$/;"	t
invlpg	kernel/include/x86/x86.h	/^invlpg(void *addr)$/;"	f
inw	kernel/include/x86/x86.h	/^inw(int port)$/;"	f
irq	app/include/x86/memory.h	/^	int32_t irq;$/;"	m	struct:TrapFrame
irq	kernel/include/x86/memory.h	/^	   int32_t irq;$/;"	m	struct:TrapFrame
irq_handle	kernel/irq/irq_handle.c	/^irq_handle(struct TrapFrame *tf) {$/;"	f
itoa	app/lib/string.c	/^char *itoa(int a) {$/;"	f
itoa	kernel/lib/string.c	/^char *itoa(int a) {$/;"	f
kernel_init	kernel/src/main.c	/^kernel_init(void) {$/;"	f
key_code	app/lib/kbd.c	/^static volatile int key_code = 0;$/;"	v	file:
key_code	kernel/src/keyboard.c	/^static volatile int key_code = 0;$/;"	v	file:
key_number	app/include/game.h	/^int key_number;$/;"	v
keyboard_event	kernel/src/keyboard.c	/^keyboard_event(int code) {$/;"	f
kstack	kernel/include/process.h	/^	uint8_t kstack[KSTACK_SIZE];$/;"	m	struct:PCB
last_key_code	app/lib/kbd.c	/^int last_key_code(void) {$/;"	f
lcr0	kernel/include/x86/x86.h	/^lcr0(uint32_t val)$/;"	f
lcr3	kernel/include/x86/x86.h	/^lcr3(uint32_t val)$/;"	f
lcr4	kernel/include/x86/x86.h	/^lcr4(uint32_t val)$/;"	f
ldt	kernel/include/x86/memory.h	/^                uint32_t es, cs, ss, ds, fs, gs, ldt;$/;"	m	struct:TSS::__anon3::__anon5
len	app/lib/printf.c	/^int len;$/;"	v
lgdt	kernel/include/x86/x86.h	/^lgdt(void *p)$/;"	f
lidt	kernel/include/x86/x86.h	/^lidt(void *p)$/;"	f
lim_15_0	kernel/include/x86/memory.h	/^	uint32_t lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:SegDesc
lim_19_16	kernel/include/x86/memory.h	/^	uint32_t lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:SegDesc
limit	kernel/include/memory.h	/^	uint32_t base,limit,gdt,cs,ds;$/;"	m	struct:__anon6
link	kernel/include/x86/memory.h	/^	uint32_t link;         \/\/ old ts selector$/;"	m	struct:TSS
list	kernel/include/memory.h	/^	ListHead list;$/;"	m	struct:__anon6
list	kernel/include/process.h	/^	ListHead list;$/;"	m	struct:PCB
list_add	kernel/include/list.h	/^list_add(ListHead *prev, ListHead *next, ListHead *data) {$/;"	f
list_add_after	kernel/include/list.h	/^list_add_after(ListHead *list, ListHead *data) {$/;"	f
list_add_before	kernel/include/list.h	/^list_add_before(ListHead *list, ListHead *data) {$/;"	f
list_add_tail	kernel/include/list.h	/^static inline void list_add_tail(ListHead *new, ListHead *head)$/;"	f
list_del	kernel/include/list.h	/^list_del(ListHead *data) {$/;"	f
list_empty	kernel/include/list.h	/^list_empty(ListHead *list) {$/;"	f
list_entry	kernel/include/list.h	11;"	d
list_foreach	kernel/include/list.h	68;"	d
list_init	kernel/include/list.h	/^list_init(ListHead *list) {$/;"	f
lldt	kernel/include/x86/x86.h	/^lldt(uint16_t sel)$/;"	f
load	kernel/process/load.c	/^load(void) {$/;"	f
load_umain	kernel/kvm.c	/^load_umain(void) {$/;"	f
ltr	kernel/include/x86/x86.h	/^ltr(uint16_t sel)$/;"	f
machine	boot/boot.h	/^	unsigned short machine;$/;"	m	struct:ELFHeader
machine	kernel/include/boot.h	/^	unsigned short machine;$/;"	m	struct:ELFHeader
machine	kernel/include/x86/io.h	/^	unsigned short machine;$/;"	m	struct:ELFHeader
magic	boot/boot.h	/^	unsigned int   magic;$/;"	m	struct:ELFHeader
magic	kernel/include/boot.h	/^	unsigned int   magic;$/;"	m	struct:ELFHeader
magic	kernel/include/x86/io.h	/^	unsigned int   magic;$/;"	m	struct:ELFHeader
main_loop	app/game.c	/^main_loop(void) {$/;"	f
make_invalid_pde	kernel/include/memory.h	22;"	d
make_invalid_pte	kernel/include/memory.h	23;"	d
make_pde	kernel/include/memory.h	24;"	d
make_pte	kernel/include/memory.h	25;"	d
map	app/include/game.h	/^int map[2][12][12];$/;"	v
memcpy	app/lib/string.c	/^void memcpy(void *dest, const void *src, size_t size) {$/;"	f
memcpy	kernel/lib/string.c	/^void memcpy(void *dest, const void *src, size_t size) {$/;"	f
memset	app/lib/string.c	/^void memset(void *dest, int data, size_t size) {$/;"	f
memset	kernel/lib/string.c	/^void memset(void *dest, int data, size_t size) {$/;"	f
memsz	boot/boot.h	/^	unsigned int memsz;$/;"	m	struct:ProgramHeader
memsz	kernel/include/boot.h	/^	unsigned int memsz;$/;"	m	struct:ProgramHeader
memsz	kernel/include/x86/io.h	/^	unsigned int memsz;$/;"	m	struct:ProgramHeader
miss	app/lib/effect.c	/^static int hit = 0, miss = 0;$/;"	v	file:
mm_malloc	kernel/memory/memory.c	/^segment* mm_malloc(uint32_t vaddr,uint32_t size,uint32_t type)$/;"	f
monster	app/lib/draw.c	6;"	d	file:
monster	app/lib/effect.c	9;"	d	file:
monster_blood	app/include/game.h	28;"	d
new_process	kernel/process.c	/^PCB *new_process() {$/;"	f
next	kernel/include/list.h	/^	struct ListHead *prev, *next;$/;"	m	struct:ListHead	typeref:struct:ListHead::
number	kernel/process.c	/^static uint32_t number;$/;"	v	file:
off	boot/boot.h	/^	unsigned int off;$/;"	m	struct:ProgramHeader
off	kernel/include/boot.h	/^	unsigned int off;$/;"	m	struct:ProgramHeader
off	kernel/include/x86/io.h	/^	unsigned int off;$/;"	m	struct:ProgramHeader
off_t	kernel/include/types.h	/^typedef int32_t off_t;$/;"	t
offset	kernel/irq/irq_handle.c	/^int offset;$/;"	v
offset_15_0	app/include/x86/memory.h	/^	uint32_t offset_15_0      : 16;$/;"	m	struct:GateDescriptor
offset_15_0	kernel/include/x86/memory.h	/^	uint32_t offset_15_0      : 16;$/;"	m	struct:GateDescriptor
offset_31_16	app/include/x86/memory.h	/^	uint32_t offset_31_16     : 16;$/;"	m	struct:GateDescriptor
offset_31_16	kernel/include/x86/memory.h	/^	uint32_t offset_31_16     : 16;$/;"	m	struct:GateDescriptor
offsetof	kernel/include/types.h	71;"	d
old_esp	kernel/include/x86/memory.h	/^	   uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
out_byte	app/include/x86/io.h	/^out_byte(uint16_t port, int8_t data) {$/;"	f
out_byte	boot/boot.h	/^out_byte(short port, char data) {$/;"	f
out_byte	kernel/include/boot.h	/^out_byte(short port, char data) {$/;"	f
out_byte	kernel/include/x86/io.h	/^out_byte(uint16_t port, int8_t data) {$/;"	f
out_byte2	kernel/include/x86/io.h	/^out_byte2(short port, char data) {$/;"	f
outb	kernel/include/x86/x86.h	/^outb(int port, uint8_t data)$/;"	f
outl	kernel/include/x86/x86.h	/^outl(int port, uint32_t data)$/;"	f
outsb	kernel/include/x86/x86.h	/^outsb(int port, const void *addr, int cnt)$/;"	f
outsl	kernel/include/x86/x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outsw	kernel/include/x86/x86.h	/^outsw(int port, const void *addr, int cnt)$/;"	f
outw	kernel/include/x86/x86.h	/^outw(int port, uint16_t data)$/;"	f
p	kernel/include/x86/memory.h	/^	uint32_t p : 1;          \/\/ Present$/;"	m	struct:SegDesc
pa2page	kernel/include/pmap.h	/^pa2page(physaddr_t pa)$/;"	f
pa_cs	kernel/include/process.h	/^	int pa_cs;$/;"	m	struct:PCB
pa_ds	kernel/include/process.h	/^	int pa_ds;$/;"	m	struct:PCB
pa_to_va	kernel/include/memory.h	14;"	d
pad0	app/include/x86/memory.h	/^	uint32_t pad0             : 8;$/;"	m	struct:GateDescriptor
pad0	kernel/include/x86/memory.h	/^	uint32_t pad0             : 8;$/;"	m	struct:GateDescriptor
paddr	boot/boot.h	/^	unsigned int paddr;$/;"	m	struct:ProgramHeader
paddr	kernel/include/boot.h	/^	unsigned int paddr;$/;"	m	struct:ProgramHeader
paddr	kernel/include/x86/io.h	/^	unsigned int paddr;$/;"	m	struct:ProgramHeader
page2kva	kernel/include/pmap.h	/^page2kva(struct PageInfo *pp)$/;"	f
page2pa	kernel/include/pmap.h	/^page2pa(struct PageInfo *pp)$/;"	f
palette	kernel/src/device/palette.c	/^static uint8_t palette[NR_PALETTE_ENTRY][3] = {$/;"	v	file:
pcb	kernel/process.c	/^PCB pcb[NR_PCB];$/;"	v
pcb_head	kernel/process.c	/^ListHead pcb_head;$/;"	v
pd_base	kernel/include/mmu.h	/^	uint32_t pd_base;		\/\/ Base address$/;"	m	struct:Pseudodesc
pd_lim	kernel/include/mmu.h	/^	uint16_t pd_lim;		\/\/ Limit$/;"	m	struct:Pseudodesc
pde_t	kernel/include/memlayout.h	/^typedef uint32_t pde_t;$/;"	t
phentsize	boot/boot.h	/^	unsigned short phentsize;$/;"	m	struct:ELFHeader
phentsize	kernel/include/boot.h	/^	unsigned short phentsize;$/;"	m	struct:ELFHeader
phentsize	kernel/include/x86/io.h	/^	unsigned short phentsize;$/;"	m	struct:ELFHeader
phnum	boot/boot.h	/^	unsigned short phnum;$/;"	m	struct:ELFHeader
phnum	kernel/include/boot.h	/^	unsigned short phnum;$/;"	m	struct:ELFHeader
phnum	kernel/include/x86/io.h	/^	unsigned short phnum;$/;"	m	struct:ELFHeader
phoff	boot/boot.h	/^	unsigned int   phoff;$/;"	m	struct:ELFHeader
phoff	kernel/include/boot.h	/^	unsigned int   phoff;$/;"	m	struct:ELFHeader
phoff	kernel/include/x86/io.h	/^	unsigned int   phoff;$/;"	m	struct:ELFHeader
physaddr_t	kernel/include/types.h	/^typedef uint32_t physaddr_t;$/;"	t
pid	kernel/include/process.h	/^	int pid;$/;"	m	struct:PCB
pp_link	kernel/include/memlayout.h	/^	struct PageInfo *pp_link;$/;"	m	struct:PageInfo	typeref:struct:PageInfo::PageInfo
pp_ref	kernel/include/memlayout.h	/^	uint16_t pp_ref;$/;"	m	struct:PageInfo
ppn_t	kernel/include/types.h	/^typedef uint32_t ppn_t;$/;"	t
prepare_buffer	app/device/video.c	/^prepare_buffer(void) {$/;"	f
prepare_buffer	kernel/lib/video.c	/^prepare_buffer(void) {$/;"	f
present	app/include/x86/memory.h	/^	uint32_t present          : 1;$/;"	m	struct:GateDescriptor
present	kernel/include/x86/memory.h	/^	uint32_t present          : 1;$/;"	m	struct:GateDescriptor
press_snake_key	kernel/src/keyboard.c	/^void press_snake_key(int scan_code)$/;"	f
prev	kernel/include/list.h	/^	struct ListHead *prev, *next;$/;"	m	struct:ListHead	typeref:struct:ListHead::ListHead
printf	app/lib/printf.c	/^printf(const char *ctl, ...) {$/;"	f
printk	kernel/lib/printk.c	/^printk(const char *ctl, ...) {$/;"	f
privilege_level	app/include/x86/memory.h	/^	uint32_t privilege_level  : 2;$/;"	m	struct:GateDescriptor
privilege_level	kernel/include/x86/memory.h	/^	uint32_t privilege_level  : 2;$/;"	m	struct:GateDescriptor
pte_t	kernel/include/memlayout.h	/^typedef uint32_t pte_t;$/;"	t
query_key	kernel/src/keyboard.c	/^bool query_key(int index)$/;"	f
query_snake_key	app/lib/kbd.c	/^bool query_snake_key(int index)$/;"	f
rand	app/lib/random.c	/^rand(void) {$/;"	f
rcr0	kernel/include/x86/x86.h	/^rcr0(void)$/;"	f
rcr2	kernel/include/x86/x86.h	/^rcr2(void)$/;"	f
rcr3	kernel/include/x86/x86.h	/^rcr3(void)$/;"	f
rcr4	kernel/include/x86/x86.h	/^rcr4(void)$/;"	f
read_ebp	kernel/include/x86/x86.h	/^read_ebp(void)$/;"	f
read_eflags	kernel/include/x86/x86.h	/^read_eflags(void)$/;"	f
read_esp	kernel/include/x86/x86.h	/^read_esp(void)$/;"	f
read_palette	kernel/src/device/palette.c	/^void read_palette() {$/;"	f
read_tsc	kernel/include/x86/x86.h	/^read_tsc(void)$/;"	f
readsect	boot/main.c	/^readsect(void *dst, int offset) {$/;"	f
readsect	kernel/process/load.c	/^readsect(void *dst, int offset) {$/;"	f
readseg	boot/main.c	/^readseg(unsigned char *pa, int count, int offset) {$/;"	f
readseg	kernel/process/load.c	/^readseg(unsigned char *pa, int count, int offset) {$/;"	f
ready	kernel/process.c	/^ListHead ready;$/;"	v
ready_pcb	kernel/process.c	/^void ready_pcb(PCB *l)$/;"	f
real_fps	app/game.c	/^static int real_fps;$/;"	v	file:
realdraw	app/lib/syscall.c	/^void realdraw(uint8_t *buf) {$/;"	f
redraw_screen	app/lib/draw.c	/^redraw_screen() {$/;"	f
release_snake	app/lib/kbd.c	/^release_snake(int index)$/;"	f
relocated	kernel/entry.S	/^relocated:$/;"	l
rsv1	kernel/include/x86/memory.h	/^	uint32_t rsv1 : 1;       \/\/ Reserved$/;"	m	struct:SegDesc
s	kernel/include/x86/memory.h	/^	uint32_t s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:SegDesc
save_idt	app/include/x86/cpu.h	/^save_idt(void *addr, uint32_t size) {$/;"	f
save_idt	kernel/include/x86/cpu.h	/^save_idt(void *addr, uint32_t size) {$/;"	f
schedule	kernel/process.c	/^void schedule(void)$/;"	f
sd_avl	kernel/include/mmu.h	/^	unsigned sd_avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:Segdesc
sd_base_15_0	kernel/include/mmu.h	/^	unsigned sd_base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:Segdesc
sd_base_23_16	kernel/include/mmu.h	/^	unsigned sd_base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:Segdesc
sd_base_31_24	kernel/include/mmu.h	/^	unsigned sd_base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:Segdesc
sd_db	kernel/include/mmu.h	/^	unsigned sd_db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:Segdesc
sd_dpl	kernel/include/mmu.h	/^	unsigned sd_dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:Segdesc
sd_g	kernel/include/mmu.h	/^	unsigned sd_g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:Segdesc
sd_lim_15_0	kernel/include/mmu.h	/^	unsigned sd_lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:Segdesc
sd_lim_19_16	kernel/include/mmu.h	/^	unsigned sd_lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:Segdesc
sd_p	kernel/include/mmu.h	/^	unsigned sd_p : 1;          \/\/ Present$/;"	m	struct:Segdesc
sd_rsv1	kernel/include/mmu.h	/^	unsigned sd_rsv1 : 1;       \/\/ Reserved$/;"	m	struct:Segdesc
sd_s	kernel/include/mmu.h	/^	unsigned sd_s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:Segdesc
sd_type	kernel/include/mmu.h	/^	unsigned sd_type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:Segdesc
seed	app/lib/random.c	/^static int seed = 0;$/;"	v	file:
seg	kernel/memory/memory.c	/^segment seg[MAX_MEM\/SEG_SIZE];$/;"	v
segment	app/include/x86/memory.h	/^	uint32_t segment          : 16;$/;"	m	struct:GateDescriptor
segment	kernel/include/memory.h	/^segment;$/;"	t	typeref:struct:__anon6
segment	kernel/include/x86/memory.h	/^	uint32_t segment          : 16;$/;"	m	struct:GateDescriptor
serial_idle	kernel/src/serial.c	/^serial_idle(void) {$/;"	f	file:
serial_printc	kernel/src/serial.c	/^serial_printc(char ch) {$/;"	f
set_fps	app/game.c	/^set_fps(int value) {$/;"	f
set_gdt	kernel/include/x86/memory.h	/^set_gdt(SegDesc *gdt, uint32_t size) {$/;"	f
set_intr	kernel/irq/idt.c	/^set_intr(struct GateDescriptor *ptr, uint32_t selector, uint32_t offset, uint32_t dpl) {$/;"	f	file:
set_keyboard_intr_handler	kernel/irq/irq_handle.c	/^set_keyboard_intr_handler( void (*ptr)(int) ) {$/;"	f
set_segment	kernel/kvm.c	/^ set_segment(SegDesc *ptr, uint32_t pl, uint32_t type, uint32_t base, uint32_t limit) {$/;"	f
set_timer_intr_handler	kernel/irq/irq_handle.c	/^set_timer_intr_handler( void (*ptr)(void) ) {$/;"	f
set_trap	kernel/irq/idt.c	/^set_trap(struct GateDescriptor *ptr, uint32_t selector, uint32_t offset, uint32_t dpl) {$/;"	f	file:
set_tss_esp0	kernel/kvm.c	/^set_tss_esp0(int esp)$/;"	f
shead	app/lib/effect.c	/^static snake_t shead=NULL;\/\/snake$/;"	v	file:
shentsize	boot/boot.h	/^	unsigned short shentsize;$/;"	m	struct:ELFHeader
shentsize	kernel/include/boot.h	/^	unsigned short shentsize;$/;"	m	struct:ELFHeader
shentsize	kernel/include/x86/io.h	/^	unsigned short shentsize;$/;"	m	struct:ELFHeader
shnum	boot/boot.h	/^	unsigned short shnum;$/;"	m	struct:ELFHeader
shnum	kernel/include/boot.h	/^	unsigned short shnum;$/;"	m	struct:ELFHeader
shnum	kernel/include/x86/io.h	/^	unsigned short shnum;$/;"	m	struct:ELFHeader
shoff	boot/boot.h	/^	unsigned int   shoff;$/;"	m	struct:ELFHeader
shoff	kernel/include/boot.h	/^	unsigned int   shoff;$/;"	m	struct:ELFHeader
shoff	kernel/include/x86/io.h	/^	unsigned int   shoff;$/;"	m	struct:ELFHeader
shstrndx	boot/boot.h	/^	unsigned short shstrndx;$/;"	m	struct:ELFHeader
shstrndx	kernel/include/boot.h	/^	unsigned short shstrndx;$/;"	m	struct:ELFHeader
shstrndx	kernel/include/x86/io.h	/^	unsigned short shstrndx;$/;"	m	struct:ELFHeader
size_t	app/include/types.h	/^typedef int32_t size_t;$/;"	t
size_t	kernel/include/types.h	/^typedef uint32_t size_t;$/;"	t
sleep	kernel/process.c	/^ListHead sleep;$/;"	v
snake_code	kernel/src/keyboard.c	/^static int snake_code[]=$/;"	v	file:
snake_pressed	app/lib/kbd.c	/^static bool snake_pressed[4];$/;"	v	file:
snake_pressed	kernel/src/keyboard.c	/^static bool snake_pressed[4];$/;"	v	file:
spin	kernel/entry.S	/^spin:	jmp	spin$/;"	l
sprint	app/lib/printf.c	/^void sprint(char ch) {$/;"	f
srand	app/lib/random.c	/^srand(int s) {$/;"	f
ss	kernel/include/x86/memory.h	/^	    uint32_t esp, ss;$/;"	m	struct:TrapFrame
ss	kernel/include/x86/memory.h	/^                uint32_t es, cs, ss, ds, fs, gs, ldt;$/;"	m	struct:TSS::__anon3::__anon5
ss0	kernel/include/x86/memory.h	/^	uint32_t ss0;          \/\/ after an increase in privilege level$/;"	m	struct:TSS
ss1	kernel/include/x86/memory.h	/^                uint32_t esp1,ss1,esp2,ss2;$/;"	m	struct:TSS::__anon3::__anon5
ss2	kernel/include/x86/memory.h	/^                uint32_t esp1,ss1,esp2,ss2;$/;"	m	struct:TSS::__anon3::__anon5
ssize_t	kernel/include/types.h	/^typedef int32_t ssize_t;$/;"	t
stack	kernel/src/main.c	/^static uint8_t stack[8196];$/;"	v	file:
start	boot/start.S	/^start:$/;"	l
start32	boot/start.S	/^start32:$/;"	l
strcpy	app/lib/string.c	/^void strcpy(char *d, const char *s) {$/;"	f
strcpy	kernel/lib/string.c	/^void strcpy(char *d, const char *s) {$/;"	f
strlen	app/lib/string.c	/^size_t strlen(const char *str) {$/;"	f
strlen	kernel/lib/string.c	/^size_t strlen(const char *str) {$/;"	f
sys_draw	kernel/syscall/do_syscall.c	/^static void sys_draw(struct TrapFrame *tf) {$/;"	f	file:
sys_keyboard	kernel/syscall/do_syscall.c	/^static void sys_keyboard(struct TrapFrame *tf)$/;"	f	file:
sys_write	kernel/syscall/do_syscall.c	/^static void sys_write(struct TrapFrame *tf) {$/;"	f	file:
syscall	app/lib/syscall.c	/^int syscall(int id, int val1, int val2, int val3) {$/;"	f
system	app/include/x86/memory.h	/^	uint32_t system           : 1;$/;"	m	struct:GateDescriptor
system	kernel/include/x86/memory.h	/^	uint32_t system           : 1;$/;"	m	struct:GateDescriptor
text	app/include/game.h	/^	int text;$/;"	v
tf	kernel/include/process.h	/^	TrapFrame tf;$/;"	m	struct:PCB
tick	kernel/src/time.c	/^volatile int tick = 0;$/;"	v
time	app/lib/syscall.c	/^int time(void)$/;"	f
time	kernel/include/process.h	/^	int time;$/;"	m	struct:PCB
timer_event	kernel/src/time.c	/^timer_event(void) {$/;"	f
tlbflush	kernel/include/x86/x86.h	/^tlbflush(void)$/;"	f
true	kernel/include/types.h	/^enum { false, true };$/;"	e	enum:__anon7
ts_cr3	kernel/include/mmu.h	/^	physaddr_t ts_cr3;	\/\/ Page directory base$/;"	m	struct:Taskstate
ts_cs	kernel/include/mmu.h	/^	uint16_t ts_cs;$/;"	m	struct:Taskstate
ts_ds	kernel/include/mmu.h	/^	uint16_t ts_ds;$/;"	m	struct:Taskstate
ts_eax	kernel/include/mmu.h	/^	uint32_t ts_eax;	\/\/ More saved state (registers)$/;"	m	struct:Taskstate
ts_ebp	kernel/include/mmu.h	/^	uintptr_t ts_ebp;$/;"	m	struct:Taskstate
ts_ebx	kernel/include/mmu.h	/^	uint32_t ts_ebx;$/;"	m	struct:Taskstate
ts_ecx	kernel/include/mmu.h	/^	uint32_t ts_ecx;$/;"	m	struct:Taskstate
ts_edi	kernel/include/mmu.h	/^	uint32_t ts_edi;$/;"	m	struct:Taskstate
ts_edx	kernel/include/mmu.h	/^	uint32_t ts_edx;$/;"	m	struct:Taskstate
ts_eflags	kernel/include/mmu.h	/^	uint32_t ts_eflags;$/;"	m	struct:Taskstate
ts_eip	kernel/include/mmu.h	/^	uintptr_t ts_eip;	\/\/ Saved state from last task switch$/;"	m	struct:Taskstate
ts_es	kernel/include/mmu.h	/^	uint16_t ts_es;		\/\/ Even more saved state (segment selectors)$/;"	m	struct:Taskstate
ts_esi	kernel/include/mmu.h	/^	uint32_t ts_esi;$/;"	m	struct:Taskstate
ts_esp	kernel/include/mmu.h	/^	uintptr_t ts_esp;$/;"	m	struct:Taskstate
ts_esp0	kernel/include/mmu.h	/^	uintptr_t ts_esp0;	\/\/ Stack pointers and segment selectors$/;"	m	struct:Taskstate
ts_esp1	kernel/include/mmu.h	/^	uintptr_t ts_esp1;$/;"	m	struct:Taskstate
ts_esp2	kernel/include/mmu.h	/^	uintptr_t ts_esp2;$/;"	m	struct:Taskstate
ts_fs	kernel/include/mmu.h	/^	uint16_t ts_fs;$/;"	m	struct:Taskstate
ts_gs	kernel/include/mmu.h	/^	uint16_t ts_gs;$/;"	m	struct:Taskstate
ts_iomb	kernel/include/mmu.h	/^	uint16_t ts_iomb;	\/\/ I\/O map base address$/;"	m	struct:Taskstate
ts_ldt	kernel/include/mmu.h	/^	uint16_t ts_ldt;$/;"	m	struct:Taskstate
ts_link	kernel/include/mmu.h	/^	uint32_t ts_link;	\/\/ Old ts selector$/;"	m	struct:Taskstate
ts_padding1	kernel/include/mmu.h	/^	uint16_t ts_padding1;$/;"	m	struct:Taskstate
ts_padding10	kernel/include/mmu.h	/^	uint16_t ts_padding10;$/;"	m	struct:Taskstate
ts_padding2	kernel/include/mmu.h	/^	uint16_t ts_padding2;$/;"	m	struct:Taskstate
ts_padding3	kernel/include/mmu.h	/^	uint16_t ts_padding3;$/;"	m	struct:Taskstate
ts_padding4	kernel/include/mmu.h	/^	uint16_t ts_padding4;$/;"	m	struct:Taskstate
ts_padding5	kernel/include/mmu.h	/^	uint16_t ts_padding5;$/;"	m	struct:Taskstate
ts_padding6	kernel/include/mmu.h	/^	uint16_t ts_padding6;$/;"	m	struct:Taskstate
ts_padding7	kernel/include/mmu.h	/^	uint16_t ts_padding7;$/;"	m	struct:Taskstate
ts_padding8	kernel/include/mmu.h	/^	uint16_t ts_padding8;$/;"	m	struct:Taskstate
ts_padding9	kernel/include/mmu.h	/^	uint16_t ts_padding9;$/;"	m	struct:Taskstate
ts_ss	kernel/include/mmu.h	/^	uint16_t ts_ss;$/;"	m	struct:Taskstate
ts_ss0	kernel/include/mmu.h	/^	uint16_t ts_ss0;	\/\/   after an increase in privilege level$/;"	m	struct:Taskstate
ts_ss1	kernel/include/mmu.h	/^	uint16_t ts_ss1;$/;"	m	struct:Taskstate
ts_ss2	kernel/include/mmu.h	/^	uint16_t ts_ss2;$/;"	m	struct:Taskstate
ts_t	kernel/include/mmu.h	/^	uint16_t ts_t;		\/\/ Trap on task switch$/;"	m	struct:Taskstate
tss	kernel/kvm.c	/^TSS tss;$/;"	v
type	app/include/x86/memory.h	/^	uint32_t type             : 4;$/;"	m	struct:GateDescriptor
type	boot/boot.h	/^	unsigned int type;$/;"	m	struct:ProgramHeader
type	boot/boot.h	/^	unsigned short type;$/;"	m	struct:ELFHeader
type	kernel/include/boot.h	/^	unsigned int type;$/;"	m	struct:ProgramHeader
type	kernel/include/boot.h	/^	unsigned short type;$/;"	m	struct:ELFHeader
type	kernel/include/x86/io.h	/^	unsigned int type;$/;"	m	struct:ProgramHeader
type	kernel/include/x86/io.h	/^	unsigned short type;$/;"	m	struct:ELFHeader
type	kernel/include/x86/memory.h	/^	uint32_t type             : 4;$/;"	m	struct:GateDescriptor
type	kernel/include/x86/memory.h	/^	uint32_t type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:SegDesc
uint16_t	app/include/types.h	/^typedef unsigned short uint16_t;$/;"	t
uint16_t	kernel/include/types.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	app/include/types.h	/^typedef unsigned int   uint32_t;$/;"	t
uint32_t	kernel/include/types.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	kernel/include/types.h	/^typedef unsigned long long uint64_t;$/;"	t
uint8_t	app/include/types.h	/^typedef unsigned char  uint8_t;$/;"	t
uint8_t	kernel/include/types.h	/^typedef unsigned char uint8_t;$/;"	t
uintptr_t	kernel/include/types.h	/^typedef uint32_t uintptr_t;$/;"	t
unused_pcb	kernel/process.c	/^ListHead unused_pcb;$/;"	v
up	app/lib/draw.c	8;"	d	file:
up	app/lib/effect.c	11;"	d	file:
up_x	app/include/game.h	/^	int up_x;$/;"	m	struct:__anon10
up_y	app/include/game.h	/^	int up_y;$/;"	m	struct:__anon10
update_kbd	app/lib/kbd.c	/^void update_kbd()$/;"	f
update_keypress	app/lib/effect.c	/^void  update_keypress(void) {$/;"	f
update_letter_pos	app/lib/effect.c	/^update_letter_pos(void) {$/;"	f
used_seg	kernel/memory/memory.c	/^ListHead used_seg;$/;"	v
v	app/include/game.h	/^	float v;$/;"	v
v_buf	app/device/video.c	/^static uint8_t v_buf[320*200];$/;"	v	file:
v_buf	kernel/lib/video.c	/^static uint8_t v_buf[320*200];$/;"	v	file:
va	kernel/include/process.h	/^	int va;$/;"	m	struct:PCB
va_arg	kernel/include/stdarg.h	9;"	d
va_end	kernel/include/stdarg.h	11;"	d
va_list	kernel/include/stdarg.h	/^typedef __builtin_va_list va_list;$/;"	t
va_start	kernel/include/stdarg.h	7;"	d
va_to_pa	kernel/include/memory.h	13;"	d
vaddr	boot/boot.h	/^	unsigned int vaddr;$/;"	m	struct:ProgramHeader
vaddr	kernel/include/boot.h	/^	unsigned int vaddr;$/;"	m	struct:ProgramHeader
vaddr	kernel/include/x86/io.h	/^	unsigned int vaddr;$/;"	m	struct:ProgramHeader
vbuf	app/device/video.c	/^static uint8_t vbuf[SCR_SIZE];$/;"	v	file:
vbuf	kernel/lib/video.c	/^static uint8_t vbuf[SCR_SIZE];$/;"	v	file:
version	boot/boot.h	/^	unsigned int   version;$/;"	m	struct:ELFHeader
version	kernel/include/boot.h	/^	unsigned int   version;$/;"	m	struct:ELFHeader
version	kernel/include/x86/io.h	/^	unsigned int   version;$/;"	m	struct:ELFHeader
vfprintf	app/lib/printf.c	/^static int vfprintf(void (*printer)(char), const char *ctl, void **args) {$/;"	f	file:
vfprintf	kernel/lib/printk.c	/^int vfprintf(void (*printer)(char), const char *ctl, void **args) {$/;"	f
vmem	app/device/video.c	/^uint8_t *vmem = v_buf;$/;"	v
vmem	kernel/lib/video.c	/^uint8_t *vmem = v_buf;$/;"	v
vref	app/device/video.c	/^static uint8_t vref[SCR_SIZE];$/;"	v	file:
vref	kernel/lib/video.c	/^static uint8_t vref[SCR_SIZE];$/;"	v	file:
wait_for_interrupt	app/include/x86/cpu.h	/^wait_for_interrupt() {$/;"	f
wait_for_interrupt	kernel/include/x86/cpu.h	/^wait_for_interrupt() {$/;"	f
waitdisk	boot/main.c	/^waitdisk(void) {$/;"	f
waitdisk	kernel/process/load.c	/^waitdisk(void) {$/;"	f
wall	app/lib/draw.c	4;"	d	file:
wall	app/lib/effect.c	7;"	d	file:
write	app/lib/syscall.c	/^void  write(char *buf, int len) {$/;"	f
write_eflags	kernel/include/x86/x86.h	/^write_eflags(uint32_t eflags)$/;"	f
write_palette	kernel/src/device/palette.c	/^void write_palette() {$/;"	f
x	app/include/game.h	/^	float x, y;$/;"	v
x	app/include/game.h	/^	int  x,y;$/;"	v
x	app/include/game.h	/^	int x;$/;"	v
xchg	kernel/include/x86/x86.h	/^xchg(volatile uint32_t *addr, uint32_t newval)$/;"	f
xxx	app/include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame
y	app/include/game.h	/^	float x, y;$/;"	v
y	app/include/game.h	/^	int  x,y;$/;"	v
y	app/include/game.h	/^	int y;$/;"	v
yaoshi	app/lib/draw.c	7;"	d	file:
yaoshi	app/lib/effect.c	10;"	d	file:
